os = SMOTE(random_state=112233, sampling_strategy=0.6)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
os = SMOTE(random_state=112233, sampling_strategy=0.8)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
os = SMOTE(random_state=112233, sampling_strategy=0.8)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
os = SMOTE(random_state=112233, sampling_strategy=0.8)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_nmix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.8)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.7)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy='majority')
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy='minority')
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
# Get the 'Ecoli' Data
df = fetch_datasets()["us_crime"]
# Seperate the feature and target
X, y = df.data, df.target
# Count the target-class
print(Counter(y))
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, stratify=y, random_state=112233)
train_counter = Counter(y_train)
train_prop = [(i, train_counter[i]/len(X_train) * 100) for i in train_counter]
print(f"The train data prop: {train_prop}")
test_counter = Counter(y_test)
test_prop = [(i, test_counter[i]/len(X_test) * 100) for i in test_counter]
print(f"The test data prop: {test_prop}")
lr_noSmote = LogisticRegression(random_state=112233).fit(X_train, y_train)
sm = SMOTE(random_state=112233, sampling_strategy=1)
X_res, y_res = sm.fit_resample(X_train, y_train)
print(Counter(y_train))
print(Counter(y_res))
lr_smote = LogisticRegression(random_state=112233).fit(X_res, y_res)
# Get the 'Ecoli' Data
df = fetch_datasets()["abalone"]
# Seperate the feature and target
X, y = df.data, df.target
# Count the target-class
print(Counter(y))
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, stratify=y, random_state=112233)
train_counter = Counter(y_train)
train_prop = [(i, train_counter[i]/len(X_train) * 100) for i in train_counter]
print(f"The train data prop: {train_prop}")
test_counter = Counter(y_test)
test_prop = [(i, test_counter[i]/len(X_test) * 100) for i in test_counter]
print(f"The test data prop: {test_prop}")
lr_noSmote = LogisticRegression(random_state=112233).fit(X_train, y_train)
sm = SMOTE(random_state=112233, sampling_strategy=1)
X_res, y_res = sm.fit_resample(X_train, y_train)
print(Counter(y_train))
print(Counter(y_res))
lr_smote = LogisticRegression(random_state=112233).fit(X_res, y_res)
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print(lr_noSmote.score(X_test, y_test))
print(roc_auc_score(y_test, y_pred_nosmote))
print(confusion_matrix(y_test, y_pred_nosmote, labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print(lr_smote.score(X_test, y_test))
print(roc_auc_score(y_test, y_pred_smote))
print(confusion_matrix(y_test, y_pred_smote, labels=lr_smote.classes_))
os = SMOTE(random_state=112233, sampling_strategy='minority')
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.8)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.1)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.5)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.6)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.7)
us = RandomUnderSampler(random_state=112233, sampling_strategy='majority')
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.1)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.2)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
sm = SMOTE(random_state=112233, sampling_strategy=0.2)
X_res, y_res = sm.fit_resample(X_train, y_train)
print(Counter(y_train))
print(Counter(y_res))
lr_smote = LogisticRegression(random_state=112233).fit(X_res, y_res)
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print(lr_noSmote.score(X_test, y_test))
print(roc_auc_score(y_test, y_pred_nosmote))
print(confusion_matrix(y_test, y_pred_nosmote, labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print(lr_smote.score(X_test, y_test))
print(roc_auc_score(y_test, y_pred_smote))
print(confusion_matrix(y_test, y_pred_smote, labels=lr_smote.classes_))
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print(lr_mix.score(X_test, y_test), 'Accuracy')
print(roc_auc_score(y_test, y_pred_mix), 'auc')
print(confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
sm = SMOTE(random_state=112233, sampling_strategy=0.3)
X_res, y_res = sm.fit_resample(X_train, y_train)
print(Counter(y_train))
print(Counter(y_res))
lr_smote = LogisticRegression(random_state=112233).fit(X_res, y_res)
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print(lr_noSmote.score(X_test, y_test))
print(roc_auc_score(y_test, y_pred_nosmote))
print(confusion_matrix(y_test, y_pred_nosmote, labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print(lr_smote.score(X_test, y_test))
print(roc_auc_score(y_test, y_pred_smote))
print(confusion_matrix(y_test, y_pred_smote, labels=lr_smote.classes_))
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print('Accuracy: ',lr_noSmote.score(X_test, y_test))
print('AUC Score: ', roc_auc_score(y_test, y_pred_nosmote))
print('Confusion Matrix: ', confusion_matrix(y_test, y_pred_nosmote, labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print('Accuracy: ',lr_smote.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_smote))
print('Confusion Matrix: ', confusion_matrix(y_test, y_pred_smote, labels=lr_smote.classes_))
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print('Accuracy: ',lr_noSmote.score(X_test, y_test))
print('AUC Score: ', roc_auc_score(y_test, y_pred_nosmote))
print('Confusion Matrix: ', confusion_matrix(y_test, y_pred_nosmote, labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print('Accuracy: ',lr_smote.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_smote))
print('Confusion Matrix: ', "\n", confusion_matrix(y_test, y_pred_smote, labels=lr_smote.classes_))
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print('Accuracy: ',lr_noSmote.score(X_test, y_test))
print('AUC Score: ', roc_auc_score(y_test, y_pred_nosmote))
print('Confusion Matrix: ', "\n",confusion_matrix(y_test, y_pred_nosmote, labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print('Accuracy: ',lr_smote.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_smote))
print('Confusion Matrix: ', "\n", confusion_matrix(y_test, y_pred_smote, labels=lr_smote.classes_))
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print('Accuracy: ',lr_noSmote.score(X_test, y_test))
print('AUC Score: ', roc_auc_score(y_test, y_pred_nosmote))
print('Confusion Matrix: ', "\n",confusion_matrix(y_test, y_pred_nosmote, labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print('Accuracy: ',lr_smote.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_smote))
print('Confusion Matrix: ', "\n", confusion_matrix(y_test, y_pred_smote, labels=lr_smote.classes_))
sm = SMOTE(random_state=112233, sampling_strategy=0.3)
X_res, y_res = sm.fit_resample(X_train, y_train)
print(Counter(y_train))
print(Counter(y_res))
sm = SMOTE(random_state=112233, sampling_strategy=0.3)
X_res, y_res = sm.fit_resample(X_train, y_train)
print('Original Data: ', Counter(y_train))
print('Smoted Data: ', Counter(y_res))
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.7)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.8)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.3)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.4)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test), 'Accuracy')
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix), 'auc')
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix))
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_), '\n')
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix))
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_))
install.packages("blogdown")
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from imblearn.datasets import fetch_datasets
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from imblearn.over_sampling import SMOTE
from sklearn.metrics import roc_auc_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import ConfusionMatrixDisplay
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline
# Get the 'Ecoli' Data
df = fetch_datasets()["abalone"]
# Seperate the feature and target
X, y = df.data, df.target
# Count the target-class
print(Counter(y))
# Get the 'Abalone' Data
df = fetch_datasets()["abalone"]
# Seperate the feature and target
X, y = df.data, df.target
# Count the target-class
print(Counter(y))
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, stratify=y, random_state=112233)
train_counter = Counter(y_train)
train_prop = [(i, train_counter[i]/len(X_train) * 100) for i in train_counter]
print(f"The train data prop: {train_prop}")
test_counter = Counter(y_test)
test_prop = [(i, test_counter[i]/len(X_test) * 100) for i in test_counter]
print(f"The test data prop: {test_prop}")
lr_noSmote = LogisticRegression(random_state=112233).fit(X_train, y_train)
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8,
stratify=y, random_state=112233)
train_counter = Counter(y_train)
train_prop = [(i, train_counter[i]/len(X_train) * 100) for i in train_counter]
print(f"The train data prop: {train_prop}")
test_counter = Counter(y_test)
test_prop = [(i, test_counter[i]/len(X_test) * 100) for i in test_counter]
print(f"The test data prop: {test_prop}")
lr_noSmote = LogisticRegression(random_state=112233).fit(X_train, y_train)
sm = SMOTE(random_state=112233, sampling_strategy=0.3)
X_res, y_res = sm.fit_resample(X_train, y_train)
print('Original Data: ', Counter(y_train))
print('Smoted Data: ', Counter(y_res))
lr_smote = LogisticRegression(random_state=112233).fit(X_res, y_res)
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print('Accuracy: ',lr_noSmote.score(X_test, y_test))
print('AUC Score: ', roc_auc_score(y_test, y_pred_nosmote))
print('Confusion Matrix: ', "\n",confusion_matrix(y_test, y_pred_nosmote,
labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print('Accuracy: ',lr_smote.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_smote))
print('Confusion Matrix: ', "\n", confusion_matrix(y_test, y_pred_smote,
labels=lr_smote.classes_))
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print('Accuracy (No Smote): ',lr_noSmote.score(X_test, y_test))
print('AUC Score (No Smote): ', roc_auc_score(y_test, y_pred_nosmote))
print('Confusion Matrix (No Smote): ', "\n",confusion_matrix(y_test, y_pred_nosmote,
labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print('Accuracy (SMOTE): ',lr_smote.score(X_test, y_test))
print('AUC Score (SMOTE): ',roc_auc_score(y_test, y_pred_smote))
print('Confusion Matrix (SMOTE): ', "\n", confusion_matrix(y_test, y_pred_smote,
labels=lr_smote.classes_))
os = SMOTE(random_state=112233, sampling_strategy=0.3)
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
pipe = Pipeline(steps = [('over', os), ('u', us)])
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
print(Counter(y_mix))
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
y_pred_mix = lr_mix.predict(X_test)
print('Accuracy: ',lr_mix.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix))
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_))
sm = SMOTE(random_state=112233, sampling_strategy=0.3)
X_res, y_res = sm.fit_resample(X_train, y_train)
print('Original Data: ', Counter(y_train))
print('Smoted Data: ', Counter(y_res))
# Over-Sample
os = SMOTE(random_state=112233, sampling_strategy=0.3)
# Under-Sample
us = RandomUnderSampler(random_state=112233, sampling_strategy=0.5)
# Pipeline
pipe = Pipeline(steps = [('over', os), ('u', us)])
# New train Dataset
X_mix, y_mix = pipe.fit_resample(X_train, y_train)
# Count of the new data
print(Counter(y_mix))
# Modeling
lr_mix = LogisticRegression(random_state=112233).fit(X_mix, y_mix)
# Prediction
y_pred_mix = lr_mix.predict(X_test)
# Metrices
print('Accuracy: ',lr_mix.score(X_test, y_test))
print('AUC Score: ',roc_auc_score(y_test, y_pred_mix))
print('Confusion Matrix: ',"\n",confusion_matrix(y_test, y_pred_mix, labels=lr_mix.classes_))
# No-SMOTE model
y_pred_nosmote = lr_noSmote.predict(X_test)
print('Accuracy (No Smote): ',lr_noSmote.score(X_test, y_test))
print('AUC Score (No Smote): ', roc_auc_score(y_test, y_pred_nosmote))
print('Confusion Matrix (No Smote): ', "\n",confusion_matrix(y_test, y_pred_nosmote,
labels=lr_noSmote.classes_), '\n')
# SMOTE Model
y_pred_smote = lr_smote.predict(X_test)
print('Accuracy (SMOTE): ',lr_smote.score(X_test, y_test))
print('AUC Score (SMOTE): ',roc_auc_score(y_test, y_pred_smote))
print('Confusion Matrix (SMOTE): ', "\n", confusion_matrix(y_test, y_pred_smote,
labels=lr_smote.classes_))
quit()
quit
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
